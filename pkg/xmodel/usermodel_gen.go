// Code generated by goctl. DO NOT EDIT.

package xmodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userFieldNames          = builder.RawFieldNames(&User{})
	userRows                = strings.Join(userFieldNames, ",")
	userRowsExpectAutoSet   = strings.Join(stringx.Remove(userFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userRowsWithPlaceHolder = strings.Join(stringx.Remove(userFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	userModel interface {
		Insert(ctx context.Context, data *User) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*User, error)
		FindOneByUserName(ctx context.Context, userName string) (*User, error)
		Update(ctx context.Context, data *User) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserModel struct {
		conn  sqlx.SqlConn
		table string
	}

	User struct {
		Id              int64          `db:"id"`               // 用户id，自增主键
		UserName        string         `db:"user_name"`        // 用户名
		Password        string         `db:"password"`         // 用户密码
		FollowCount     int64          `db:"follow_count"`     // 该用户关注其他用户个数
		FollowerCount   int64          `db:"follower_count"`   // 该用户粉丝个数
		TotalFavorited  int64          `db:"total_favorited"`  // 该用户被喜欢的视频数量
		FavoriteCount   int64          `db:"favorite_count"`   // 该用户喜欢的视频数量
		Signature       sql.NullString `db:"signature"`        // 签名
		Avatar          sql.NullString `db:"avatar"`           // 用户头像
		BackgroundImage sql.NullString `db:"background_image"` // 主页背景
		WorkCount       int64          `db:"work_count"`       // 作品数量
	}
)

func newUserModel(conn sqlx.SqlConn) *defaultUserModel {
	return &defaultUserModel{
		conn:  conn,
		table: "`user`",
	}
}

func (m *defaultUserModel) withSession(session sqlx.Session) *defaultUserModel {
	return &defaultUserModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`user`",
	}
}

func (m *defaultUserModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUserModel) FindOne(ctx context.Context, id int64) (*User, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userRows, m.table)
	var resp User
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) FindOneByUserName(ctx context.Context, userName string) (*User, error) {
	var resp User
	query := fmt.Sprintf("select %s from %s where `user_name` = ? limit 1", userRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, userName)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) Insert(ctx context.Context, data *User) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, userRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserName, data.Password, data.FollowCount, data.FollowerCount, data.TotalFavorited, data.FavoriteCount, data.Signature, data.Avatar, data.BackgroundImage, data.WorkCount)
	return ret, err
}

func (m *defaultUserModel) Update(ctx context.Context, newData *User) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.UserName, newData.Password, newData.FollowCount, newData.FollowerCount, newData.TotalFavorited, newData.FavoriteCount, newData.Signature, newData.Avatar, newData.BackgroundImage, newData.WorkCount, newData.Id)
	return err
}

func (m *defaultUserModel) tableName() string {
	return m.table
}
