// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: video.proto

package video

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	VideoRPC_GetFeed_FullMethodName             = "/video.VideoRPC/GetFeed"
	VideoRPC_GetPublishVideoList_FullMethodName = "/video.VideoRPC/GetPublishVideoList"
	VideoRPC_PublishVideo_FullMethodName        = "/video.VideoRPC/PublishVideo"
)

// VideoRPCClient is the client API for VideoRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoRPCClient interface {
	GetFeed(ctx context.Context, in *GetFeedRequest, opts ...grpc.CallOption) (*GetFeedResponse, error)
	GetPublishVideoList(ctx context.Context, in *GetPublishVideoListRequest, opts ...grpc.CallOption) (*GetPublishVideoListResponse, error)
	PublishVideo(ctx context.Context, in *PublishVideoRequest, opts ...grpc.CallOption) (*PublishVideoResponse, error)
}

type videoRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoRPCClient(cc grpc.ClientConnInterface) VideoRPCClient {
	return &videoRPCClient{cc}
}

func (c *videoRPCClient) GetFeed(ctx context.Context, in *GetFeedRequest, opts ...grpc.CallOption) (*GetFeedResponse, error) {
	out := new(GetFeedResponse)
	err := c.cc.Invoke(ctx, VideoRPC_GetFeed_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoRPCClient) GetPublishVideoList(ctx context.Context, in *GetPublishVideoListRequest, opts ...grpc.CallOption) (*GetPublishVideoListResponse, error) {
	out := new(GetPublishVideoListResponse)
	err := c.cc.Invoke(ctx, VideoRPC_GetPublishVideoList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoRPCClient) PublishVideo(ctx context.Context, in *PublishVideoRequest, opts ...grpc.CallOption) (*PublishVideoResponse, error) {
	out := new(PublishVideoResponse)
	err := c.cc.Invoke(ctx, VideoRPC_PublishVideo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideoRPCServer is the server API for VideoRPC service.
// All implementations must embed UnimplementedVideoRPCServer
// for forward compatibility
type VideoRPCServer interface {
	GetFeed(context.Context, *GetFeedRequest) (*GetFeedResponse, error)
	GetPublishVideoList(context.Context, *GetPublishVideoListRequest) (*GetPublishVideoListResponse, error)
	PublishVideo(context.Context, *PublishVideoRequest) (*PublishVideoResponse, error)
	mustEmbedUnimplementedVideoRPCServer()
}

// UnimplementedVideoRPCServer must be embedded to have forward compatible implementations.
type UnimplementedVideoRPCServer struct {
}

func (UnimplementedVideoRPCServer) GetFeed(context.Context, *GetFeedRequest) (*GetFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeed not implemented")
}
func (UnimplementedVideoRPCServer) GetPublishVideoList(context.Context, *GetPublishVideoListRequest) (*GetPublishVideoListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublishVideoList not implemented")
}
func (UnimplementedVideoRPCServer) PublishVideo(context.Context, *PublishVideoRequest) (*PublishVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishVideo not implemented")
}
func (UnimplementedVideoRPCServer) mustEmbedUnimplementedVideoRPCServer() {}

// UnsafeVideoRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoRPCServer will
// result in compilation errors.
type UnsafeVideoRPCServer interface {
	mustEmbedUnimplementedVideoRPCServer()
}

func RegisterVideoRPCServer(s grpc.ServiceRegistrar, srv VideoRPCServer) {
	s.RegisterService(&VideoRPC_ServiceDesc, srv)
}

func _VideoRPC_GetFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoRPCServer).GetFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoRPC_GetFeed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoRPCServer).GetFeed(ctx, req.(*GetFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoRPC_GetPublishVideoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublishVideoListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoRPCServer).GetPublishVideoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoRPC_GetPublishVideoList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoRPCServer).GetPublishVideoList(ctx, req.(*GetPublishVideoListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoRPC_PublishVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoRPCServer).PublishVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoRPC_PublishVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoRPCServer).PublishVideo(ctx, req.(*PublishVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VideoRPC_ServiceDesc is the grpc.ServiceDesc for VideoRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VideoRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "video.VideoRPC",
	HandlerType: (*VideoRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFeed",
			Handler:    _VideoRPC_GetFeed_Handler,
		},
		{
			MethodName: "GetPublishVideoList",
			Handler:    _VideoRPC_GetPublishVideoList_Handler,
		},
		{
			MethodName: "PublishVideo",
			Handler:    _VideoRPC_PublishVideo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "video.proto",
}
